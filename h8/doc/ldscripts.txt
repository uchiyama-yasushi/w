--------------------------------------------------------------------------------
 3052.external_ram		ロムモニタ使用、拡張RAMのユーザプログラム用
 3052.internal_ram.hmon		ルネサスモニタ、内部RAMのユーザプログラム用
 3052.internal_ram.monitor	ロムモニタ、内部RAMのユーザプログラム用
 3052.rom			本番ロム用
 3052.rom_monitor		ロムモニタ用
 3052.rom_monitor.aki		拡張RAMなしロムモニタ用
 3052.rom_monitor.debug_ram	ロムモニタデバッグ用(RAM上で実行)
 3664.ram			3664テスト
 3664.rom			3664テスト
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
外部拡張RAMなしでロムモニタを使う時のメモリマップ。(aki_monitor)

0xfdf10	--------
	start vector
	24byte(free)
0xfdf2c --------
	virtual vector table (216byte)
0xfe004 -------
	vector link table (216byte)
0xfe0dc -------
	36byte(free)
0xfe100 -------

	user area
	7376byte

0xffdd0 --------

	monitor space. 320byte

0xfff10 -------end
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
外部拡張RAMでロムモニタを使う時のメモリマップ

0x80000 --------

	user area 252KB

0xbf000 --------
	monitor space 1KB (include virtual link table)
0xc0000 --------


0xfdf10	--------
0xfdf2c --------
	virtual vector table (216byte)
0xfe004 -------
0xfe100 -------

	user area 7696byte.

0xfff10 -------end
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
ALIGNについて
	 .text :
	 {
	 	 *(.text)
		 *(.rodata)
		 . = ALIGN (4);  次の.dataセクションが4byteアラインで始まるようにします。
	 } > rom
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
ATについて
	 _rom_data_start = .; これはLMA
	 .data :
	 AT (ADDR (.text) + SIZEOF (.text))
AT()を使ってLMA(ロードされるアドレス)と、VMA(実際にリンクされるアドレ
ス)を別々に設定します。.dataセクションはLMAは.textの後にロードされるけ
れど、VMAは'>intram'で指定されたとこになります。
セクションの先頭ならAT (.)
	 {
	 	 _data_start = .; これはVMA
	 	 *(.data)
		 . = ALIGN (4);
		 _data_end = .; これVMA
	 } > intram
	 _rom_data_end = _rom_data_start + SIZEOF (.data); これはLMA


PROVIDE(_bss_start)としてもシンボルを定義すると、これはweakシンボルになる。
ユーザが同じシンボルを定義したら、ユーザの定義したシンボルが使われる。
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
ABSOLUTEについて
	.section .vectors
	.long	start
のようにアセンブラルーチンで指定して、
MEMORY {
       vectors	: o = 0x00000, l = 0x4
}
SECTIONS {
	 .vectors :
	 {
		*(.vectors)
	 } > vectors
}
のようにしていた。これがLOADにならない。どこからも参照されていないセクション
だからロードにならないのかも。
ここは
	 .vectors :
	 {
	 	LONG (ABSOLUTE (start))
	 } > vectors
としてやることでLOADを立てれました。


	/DISCARD/ : { *(.*debug*) } リンクしないセクション。
	/DISCARD/ : { *(.comment) }
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
SEARCHDIRについて

SEARCH_DIRはここに書いても
Makefileでldの引数に-Lで指定してもいい。ldの引数が優先される。
-mint32は使ってません。使う時はh8300h/int32/のライブラリを指定する。

OUTPUT_FORMAT ("elf32-h8300")
OUTPUT_ARCH (h8300:h8300h)

SEARCH_DIR("/usr/local/h8300-elf/lib/h8300h"); /* newlib */
SEARCH_DIR("/usr/local/lib/gcc/h8300-elf/4.3.2/h8300h"); /* libgcc */
--------------------------------------------------------------------------------

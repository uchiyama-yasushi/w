例外について。

SH3以降ではSRのBLビットで例外/割り込みをブロックできる。IMASKビットでは
3bitの割込みマスクで割り込みをレベルでマスクできる。例外は現実にはブロッ
クできない(CPUの実行によって生じるものだから)ので、BLビットでブロックさ
れている時に例外が発生するとリセットベクタにとぶことになる。

SH1,SH2では割り込み処理がH8に似た形式のベクタ型だった。BLビットはなく、
割り込みに入る時にCPUがSRのIMASKを、受けつける割りこみのマスクに設定し、
PCとSRはスタックに積み、ベクタテーブルを参照して処理を開始した。
SH1,SH2まではMMUがなかったのでスタックでも問題なかった。SH3からはMMUが
塔載されたので、スタックに積もうとしたらTLBミスのの状況を回避するため、
PCとSRはスタックではなく、専用のSPCとSSRレジスタに退避される。SH4以降は
さらにR15がSGRレジスタに退避される。そしてSH3から割り込みと同時に切り替
わるレジスタバンクが導入された。

SH3以降はSRのIMASKの設定をCPUはやらなくなったので、ユーザがIMASKを設定
することになる。その設定までがBLビットによるブロックになる。
SH4AはCPUOPM.INTMUビットの設定によって、自動的にSR.IMASKの設定をするこ
ともできるようになった。

ベクタ型じゃなくなりINTEVT,EXPEVTレジスタからユーザが分岐する。SH3の一
部(7709とか)はINTEVT とINTEVT2。INTEVTには優先順位が入った。これはきめ
こまかい制御をしたい時用に設定したのか? SH4Aからは内蔵モジュールの割り
込みは30レベル設定可能になった。

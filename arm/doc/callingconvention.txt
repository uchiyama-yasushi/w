$ arm-elf-gcc -Q  --help=target -c
The following options are target specific:
  -mabi=                      		
  -mabort-on-noreturn         		[disabled]
  -mapcs                      		[disabled]
  -mapcs-float                		[disabled]
  -mapcs-frame                		[disabled]
  -mapcs-reentrant            		[disabled]
  -mapcs-stack-check          		[disabled]
  -march=                     		
  -marm                       		[enabled]
  -mbig-endian                		[disabled]
  -mcallee-super-interworking 		[disabled]
  -mcaller-super-interworking 		[disabled]
  -mcirrus-fix-invalid-insns  		[disabled]
  -mcpu=                      		
  -mfloat-abi=                		
  -mfp=                       		
  -mfpe                       		[disabled]
  -mfpe=                      		
  -mfpu=                      		
  -mhard-float                		[disabled]
  -mlittle-endian             		[enabled]
  -mlong-calls                		[disabled]
  -mpic-register=             		
  -mpoke-function-name        		[disabled]
  -msched-prolog              		[enabled]
  -msingle-pic-base           		[disabled]
  -msoft-float                		[disabled]
  -mstructure-size-boundary=  		
  -mthumb                     		[disabled]
  -mthumb-interwork           		[disabled]
  -mtp=                       		
  -mtpcs-frame                		[disabled]
  -mtpcs-leaf-frame           		[disabled]
  -mtune=                     		
  -mvectorize-with-neon-quad  		[disabled]
  -mwords-little-endian       		[disabled]


`interrupt'
     Use this attribute on the ARM, AVR, CRX, M32C, M32R/D, m68k, MS1,
     and Xstormy16 ports to indicate that the specified function is an
     interrupt handler.  The compiler will generate function entry and
     exit sequences suitable for use in an interrupt handler when this
     attribute is present.

     Note, interrupt handlers for the Blackfin, H8/300, H8/300H, H8S,
     and SH processors can be specified via the `interrupt_handler'
     attribute.

     Note, on the AVR, interrupts will be enabled inside the function.

     Note, for the ARM, you can specify the kind of interrupt to be
     handled by adding an optional parameter to the interrupt attribute
     like this:

          void f () __attribute__ ((interrupt ("IRQ")));

     Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT
     and UNDEF.

     On ARMv7-M the interrupt type is ignored, and the attribute means
     the function may be called with a word aligned stack pointer.

`long_call/short_call'
     This attribute specifies how a particular function is called on
     ARM.  Both attributes override the `-mlong-calls' (*note ARM
     Options::) command line switch and `#pragma long_calls' settings.
     The `long_call' attribute indicates that the function might be far
     away from the call site and require a different (more expensive)
     calling sequence.   The `short_call' attribute always places the
     offset to the function from the call site into the `BL'
     instruction directly.

`naked'
     Use this attribute on the ARM, AVR, IP2K and SPU ports to indicate
     that the specified function does not need prologue/epilogue
     sequences generated by the compiler.  It is up to the programmer
     to provide these sequences.

_ARM family--`config/arm/arm.h'_

    `f'
          Floating-point register

    `w'
          VFP floating-point register

    `F'
          One of the floating-point constants 0.0, 0.5, 1.0, 2.0, 3.0,
          4.0, 5.0 or 10.0

    `G'
          Floating-point constant that would satisfy the constraint `F'
          if it were negated

    `I'
          Integer that is valid as an immediate operand in a data
          processing instruction.  That is, an integer in the range 0
          to 255 rotated by a multiple of 2

    `J'
          Integer in the range -4095 to 4095

    `K'
          Integer that satisfies constraint `I' when inverted (ones
          complement)

    `L'
          Integer that satisfies constraint `I' when negated (twos
          complement)

    `M'
          Integer in the range 0 to 32

    `Q'
          A memory reference where the exact address is in a single
          register (``m'' is preferable for `asm' statements)

    `R'
          An item in the constant pool

    `S'
          A symbol in the text segment of the current file

    `Uv'
          A memory reference suitable for VFP load/store insns
          (reg+constant offset)

    `Uy'
          A memory reference suitable for iWMMXt load/store
          instructions.

    `Uq'
          A memory reference suitable for the ARMv4 ldrsb instruction.

5.52.1 ARM Pragmas
------------------

The ARM target defines pragmas for controlling the default addition of
`long_call' and `short_call' attributes to functions.  *Note Function
Attributes::, for information about the effects of these attributes.

`long_calls'
     Set all subsequent functions to have the `long_call' attribute.

`no_long_calls'
     Set all subsequent functions to have the `short_call' attribute.

`long_calls_off'
     Do not affect the `long_call' or `short_call' attributes of
     subsequent functions.

int
c ()
{
  return 55;
}
	.file	"a.c"
	.text
	.align	2
	.global	c
	.type	c, %function
c:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #55
	bx	lr
	.size	c, .-c
	.ident	"GCC: (GNU) 4.6.0"

RETURN VALUE: R0

int
a (int a0, int a1, int a2, int a3)
{

  return a0 + a1 + a2 - a3;
}

int
b ()
{
  return a (0, 1, 2, 3);
}

int
main ()
{

  return a (0xaa55, 4, 3, 2);
}

arm-elf-gcc -O -S a.c

	.file	"a.c"
	.text
	.align	2
	.global	a
	.type	a, %function
a:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, r0
	add	r1, r1, r2
	rsb	r0, r3, r1
	bx	lr
	.size	a, .-a
	.align	2
	.global	b
	.type	b, %function
b:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	str	lr, [sp, #-4]!
	mov	r0, #0
	mov	r1, #1
	mov	r2, #2
	mov	r3, #3
	bl	a
	ldr	pc, [sp], #4
	.size	b, .-b
	.align	2
	.global	main
	.type	main, %function
main:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	str	lr, [sp, #-4]!
	mov	r0, #43520
	add	r0, r0, #85
	mov	r1, #4
	mov	r2, #3
	mov	r3, #2
	bl	a
	ldr	pc, [sp], #4
	.size	main, .-main
	.ident	"GCC: (GNU) 4.3.2"


diff -ur gcc-4.6.0.orig/gcc/gengtype.c gcc-4.6.0/gcc/gengtype.c
--- gcc-4.6.0.orig/gcc/gengtype.c	2010-11-26 04:03:27.000000000 +0900
+++ gcc-4.6.0/gcc/gengtype.c	2018-09-08 23:42:03.000000000 +0900
@@ -3594,13 +3594,13 @@
 		  int has_length, struct fileloc *line, const char *if_marked,
 		  bool emit_pch, type_p field_type, const char *field_name)
 {
+  struct pair newv;
   /* If the field reference is relative to V, rather than to some
      subcomponent of V, we can mark any subarrays with a single stride.
      We're effectively treating the field as a global variable in its
      own right.  */
   if (v && type == v->type)
     {
-      struct pair newv;
 
       newv = *v;
       newv.type = field_type;
diff -ur gcc-4.6.0.orig/gcc/ira-int.h gcc-4.6.0/gcc/ira-int.h
--- gcc-4.6.0.orig/gcc/ira-int.h	2011-01-04 05:52:22.000000000 +0900
+++ gcc-4.6.0/gcc/ira-int.h	2018-09-09 12:30:52.000000000 +0900
@@ -1123,8 +1123,18 @@
 ira_allocno_object_iter_cond (ira_allocno_object_iterator *i, ira_allocno_t a,
 			      ira_object_t *o)
 {
+#if 0
   *o = ALLOCNO_OBJECT (a, i->n);
   return i->n++ < ALLOCNO_NUM_OBJECTS (a);
+#else
+  int n = i->n++;
+  if (n < ALLOCNO_NUM_OBJECTS (a))
+    {
+      *o = ALLOCNO_OBJECT (a, n);
+      return true;
+    }
+  return false;
+#endif
 }
 
 /* Loop over all objects associated with allocno A.  In each
diff -ur gcc-4.6.0.orig/gcc/tree.h gcc-4.6.0/gcc/tree.h
--- gcc-4.6.0.orig/gcc/tree.h	2011-03-12 07:38:58.000000000 +0900
+++ gcc-4.6.0/gcc/tree.h	2018-09-08 23:01:16.000000000 +0900
@@ -3122,7 +3122,7 @@
  /* Belong to VAR_DECL exclusively.  */
  unsigned defer_output : 1;
  unsigned hard_register : 1;
- unsigned thread_local : 1;
+ unsigned thread_local_XXX_conflict_name : 1;
  unsigned common_flag : 1;
  unsigned in_text_section : 1;
  unsigned in_constant_pool : 1;

